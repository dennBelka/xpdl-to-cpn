/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package dk.au.daimi.ascoveco.cpn.model.cpntypes.provider;

import dk.au.daimi.ascoveco.cpn.model.cpntypes.util.CpntypesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CpntypesItemProviderAdapterFactory extends CpntypesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CpntypesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNUnitItemProvider cpnUnitItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNUnitAdapter() {
		if (cpnUnitItemProvider == null) {
			cpnUnitItemProvider = new CPNUnitItemProvider(this);
		}

		return cpnUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNEnum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNEnumItemProvider cpnEnumItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNEnum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNEnumAdapter() {
		if (cpnEnumItemProvider == null) {
			cpnEnumItemProvider = new CPNEnumItemProvider(this);
		}

		return cpnEnumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNProductItemProvider cpnProductItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNProductAdapter() {
		if (cpnProductItemProvider == null) {
			cpnProductItemProvider = new CPNProductItemProvider(this);
		}

		return cpnProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNReal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNRealItemProvider cpnRealItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNReal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNRealAdapter() {
		if (cpnRealItemProvider == null) {
			cpnRealItemProvider = new CPNRealItemProvider(this);
		}

		return cpnRealItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNIndex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNIndexItemProvider cpnIndexItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNIndex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNIndexAdapter() {
		if (cpnIndexItemProvider == null) {
			cpnIndexItemProvider = new CPNIndexItemProvider(this);
		}

		return cpnIndexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNStringItemProvider cpnStringItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNStringAdapter() {
		if (cpnStringItemProvider == null) {
			cpnStringItemProvider = new CPNStringItemProvider(this);
		}

		return cpnStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNAlias} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNAliasItemProvider cpnAliasItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNAlias}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNAliasAdapter() {
		if (cpnAliasItemProvider == null) {
			cpnAliasItemProvider = new CPNAliasItemProvider(this);
		}

		return cpnAliasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNInt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNIntItemProvider cpnIntItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNInt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNIntAdapter() {
		if (cpnIntItemProvider == null) {
			cpnIntItemProvider = new CPNIntItemProvider(this);
		}

		return cpnIntItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNBool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNBoolItemProvider cpnBoolItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNBool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNBoolAdapter() {
		if (cpnBoolItemProvider == null) {
			cpnBoolItemProvider = new CPNBoolItemProvider(this);
		}

		return cpnBoolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNListItemProvider cpnListItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNListAdapter() {
		if (cpnListItemProvider == null) {
			cpnListItemProvider = new CPNListItemProvider(this);
		}

		return cpnListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNRecord} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNRecordItemProvider cpnRecordItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNRecord}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNRecordAdapter() {
		if (cpnRecordItemProvider == null) {
			cpnRecordItemProvider = new CPNRecordItemProvider(this);
		}

		return cpnRecordItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNUnion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNUnionItemProvider cpnUnionItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNUnion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNUnionAdapter() {
		if (cpnUnionItemProvider == null) {
			cpnUnionItemProvider = new CPNUnionItemProvider(this);
		}

		return cpnUnionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNSubset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPNSubsetItemProvider cpnSubsetItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.CPNSubset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPNSubsetAdapter() {
		if (cpnSubsetItemProvider == null) {
			cpnSubsetItemProvider = new CPNSubsetItemProvider(this);
		}

		return cpnSubsetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.NameTypePair} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameTypePairItemProvider nameTypePairItemProvider;

	/**
	 * This creates an adapter for a {@link dk.au.daimi.ascoveco.cpn.model.cpntypes.NameTypePair}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameTypePairAdapter() {
		if (nameTypePairItemProvider == null) {
			nameTypePairItemProvider = new NameTypePairItemProvider(this);
		}

		return nameTypePairItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (cpnUnitItemProvider != null) cpnUnitItemProvider.dispose();
		if (cpnEnumItemProvider != null) cpnEnumItemProvider.dispose();
		if (cpnProductItemProvider != null) cpnProductItemProvider.dispose();
		if (cpnRealItemProvider != null) cpnRealItemProvider.dispose();
		if (cpnIndexItemProvider != null) cpnIndexItemProvider.dispose();
		if (cpnStringItemProvider != null) cpnStringItemProvider.dispose();
		if (cpnAliasItemProvider != null) cpnAliasItemProvider.dispose();
		if (cpnIntItemProvider != null) cpnIntItemProvider.dispose();
		if (cpnBoolItemProvider != null) cpnBoolItemProvider.dispose();
		if (cpnListItemProvider != null) cpnListItemProvider.dispose();
		if (cpnRecordItemProvider != null) cpnRecordItemProvider.dispose();
		if (cpnUnionItemProvider != null) cpnUnionItemProvider.dispose();
		if (cpnSubsetItemProvider != null) cpnSubsetItemProvider.dispose();
		if (nameTypePairItemProvider != null) nameTypePairItemProvider.dispose();
	}

}
