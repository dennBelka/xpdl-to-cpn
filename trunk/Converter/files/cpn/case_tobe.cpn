<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE workspaceElements PUBLIC "-//CPN//DTD CPNXML 1.0//EN" "http://www.daimi.au.dk/~cpntools/bin/DTD/6/cpn.dtd">
<workspaceElements>
  <generator tool="CPN Tools" version="2.2.0" format="6"/>
  <cpnet>
    <globbox>
      <block id="ID1">
        <id>Standard declarations</id>
        <color id="ID85042">
          <id>UNIT</id>
          <unit/>
          <layout>colset UNIT = unit;</layout>
        </color>
        <color id="ID3">
          <id>INT</id>
          <int/>
        </color>
        <color id="ID4">
          <id>BOOL</id>
          <bool/>
        </color>
        <color id="ID5">
          <id>STRING</id>
          <string/>
        </color>
        <color id="ID1264288320">
          <id>SLIST</id>
          <list>
            <id>STRING</id>
          </list>
          <layout>colset SLIST = list STRING;</layout>
        </color>
      </block>
      <var id="ID1264314582">
        <type>
          <id>INT</id>
        </type>
        <id>p</id>
        <layout>var p:INT;</layout>
      </var>
      <color id="ID1264313641">
        <id>TRIG_TOKEN</id>
        <timed/>
        <alias>
          <id>INT</id>
        </alias>
        <layout>colset TRIG_TOKEN = INT timed;</layout>
      </color>
      <var id="ID1264313790">
        <type>
          <id>TRIG_TOKEN</id>
        </type>
        <id>tt</id>
        <layout>var tt:TRIG_TOKEN;</layout>
      </var>
      <block id="ID1264190765">
        <id>Simulation Logging</id>
        <ml id="ID1264190746">val FILE = "logs/logsCPN"
          <layout>val FILE = "logs/logsCPN"</layout>
        </ml>
        <ml id="ID1264190907">val FILE_EXTENSION = ".cpnxml"
          <layout>val FILE_EXTENSION = ".cpnxml"</layout>
        </ml>
        <use id="ID1264191062">
          <ml>"loggingFunctionsMultipleFiles.sml"</ml>
          <layout>use "loggingFunctionsMultipleFiles.sml";</layout>
        </use>
      </block>
      <var id="ID1264302717">
        <type>
          <id>INT</id>
        </type>
        <id>pt</id>
        <layout>var pt:INT;</layout>
      </var>
      <block id="ID1264191371">
        <id>Generator</id>
        <ml id="ID1264250093">fun et(mean:INT,stdD:INT)=
let
val realMean = Real.fromInt mean
val realStdD = Real.fromInt stdD
in
round(uniform(realMean-realStdD, realMean+realStdD))
end;
          <layout>fun et(mean:INT,stdD:INT)=
let
val realMean = Real.fromInt mean
val realStdD = Real.fromInt stdD
in
round(uniform(realMean-realStdD, realMean+realStdD))
end;</layout>
        </ml>
        <color id="ID1264248604">
          <id>DTYPE</id>
          <enum>
            <id>specific</id>
            <id>normal</id>
          </enum>
          <layout>colset DTYPE = with specific | normal;</layout>
        </color>
        <color id="ID1264249193">
          <id>DISTRIBUTION</id>
          <record>
            <recordfield>
              <id>dtype</id>
              <id>DTYPE</id>
            </recordfield>
            <recordfield>
              <id>specificValue</id>
              <id>INT</id>
            </recordfield>
            <recordfield>
              <id>mean</id>
              <id>INT</id>
            </recordfield>
            <recordfield>
              <id>std</id>
              <id>INT</id>
            </recordfield>
          </record>
          <layout>colset DISTRIBUTION = record dtype:DTYPE * specificValue:INT * mean:INT * std:INT;</layout>
        </color>
        <ml id="ID1264248029">fun intTime() = IntInf.toInt (time());
          <layout>fun intTime() = IntInf.toInt (time());</layout>
        </ml>
        <ml id="ID1264246128">fun dateFromString(s:STRING) =
let
  val s1 = "Sat Jan 01 10:51:07 2000"
  val dateSplit = String.tokens(fn(c) => c = #" ") s
  val timeStr = List.nth(dateSplit, 3)
  val time = String.tokens(fn(c) => c = #":") timeStr
  val day = Option.getOpt(Int.fromString(List.nth(dateSplit, 2)), 0)

  val hour = Option.getOpt(Int.fromString(List.nth(time, 0)), 0)
  val minute = Option.getOpt(Int.fromString(List.nth(time, 1)), 0)
  val second = Option.getOpt(Int.fromString(List.nth(time, 2)), 0)
  val year = Option.getOpt(Int.fromString(List.nth(dateSplit, 4)), 0)
  val monthStr = List.nth(dateSplit, 1)
  val month = case monthStr of
      "Jan" => Date.Jan
    | "Feb" => Date.Feb
    | "Mar" => Date.Mar
    | "Apr" => Date.Apr
    | "May" => Date.May
    | "Jun" => Date.Jun
    | "Jul" => Date.Jul
    | "Aug" => Date.Aug
    | "Sep" => Date.Sep
    | "Oct" => Date.Oct
    | "Nov" => Date.Nov
    | "Dec" => Date.Dec
    | _     => Date.Jan;
in
  Date.date{day = day, hour = hour, minute = minute, month =month, offset = NONE, second = second, year = year}
end
          <layout>fun dateFromString(s:STRING) =
let
  val s1 = "Sat Jan 01 10:51:07 2000"
  val dateSplit = String.tokens(fn(c) => c = #" ") s
  val timeStr = List.nth(dateSplit, 3)
  val time = String.tokens(fn(c) => c = #":") timeStr
  val day = Option.getOpt(Int.fromString(List.nth(dateSplit, 2)), 0)

  val hour = Option.getOpt(Int.fromString(List.nth(time, 0)), 0)
  val minute = Option.getOpt(Int.fromString(List.nth(time, 1)), 0)
  val second = Option.getOpt(Int.fromString(List.nth(time, 2)), 0)
  val year = Option.getOpt(Int.fromString(List.nth(dateSplit, 4)), 0)
  val monthStr = List.nth(dateSplit, 1)
  val month = case monthStr of
      "Jan" => Date.Jan
    | "Feb" => Date.Feb
    | "Mar" => Date.Mar
    | "Apr" => Date.Apr
    | "May" => Date.May
    | "Jun" => Date.Jun
    | "Jul" => Date.Jul
    | "Aug" => Date.Aug
    | "Sep" => Date.Sep
    | "Oct" => Date.Oct
    | "Nov" => Date.Nov
    | "Dec" => Date.Dec
    | _     => Date.Jan;
in
  Date.date{day = day, hour = hour, minute = minute, month =month, offset = NONE, second = second, year = year}
end</layout>
        </ml>
        <color id="ID1264240937">
          <id>ID</id>
          <timed/>
          <int/>
          <layout>colset ID = int timed;</layout>
        </color>
        <var id="ID1264192808">
          <type>
            <id>ID</id>
          </type>
          <id>i</id>
          <layout>var i:ID;</layout>
        </var>
        <ml id="ID1264252608">val OneTimeCostPerToken = 0;
          <layout>val OneTimeCostPerToken = 0;</layout>
        </ml>
        <color id="ID1264235176">
          <id>CASE</id>
          <timed/>
          <record>
            <recordfield>
              <id>ID</id>
              <id>INT</id>
            </recordfield>
            <recordfield>
              <id>ats</id>
              <id>INT</id>
            </recordfield>
            <recordfield>
              <id>ts</id>
              <id>INT</id>
            </recordfield>
          </record>
          <layout>colset CASE = record ID:INT * ats:INT * ts:INT timed;</layout>
        </color>
        <var id="ID1264269685">
          <type>
            <id>CASE</id>
          </type>
          <id>c</id>
          <layout>var c:CASE;</layout>
        </var>
        <ml id="ID1264250709">fun calcDisValue(value:DISTRIBUTION) =
let
  val dtype = #dtype(value)
  val specificValue = #specificValue(value)
  val mean = #mean(value)
  val std = #std(value)
in
  case dtype of normal => et(mean, std) | specific => specificValue
end;
          <layout>fun calcDisValue(value:DISTRIBUTION) =
let
  val dtype = #dtype(value)
  val specificValue = #specificValue(value)
  val mean = #mean(value)
  val std = #std(value)
in
  case dtype of normal => et(mean, std) | specific => specificValue
end;</layout>
        </ml>
        <ml id="ID1264247194">fun add2StartDate(ts:INT) =
let
val day = Date.day(startDate)
val second = Date.second(startDate)
val hour = Date.hour (startDate)
val minute = Date.minute(startDate)
val month = Date.month (startDate)
val offset = Date.offset (startDate)
val second = Date.second(startDate)+ ts
val year = Date.year (startDate)
in
Date.date{day = day, hour = hour, minute = minute, second = second, month = month, offset = offset, year = year}
end;
          <layout>fun add2StartDate(ts:INT) =
let
val day = Date.day(startDate)
val second = Date.second(startDate)
val hour = Date.hour (startDate)
val minute = Date.minute(startDate)
val month = Date.month (startDate)
val offset = Date.offset (startDate)
val second = Date.second(startDate)+ ts
val year = Date.year (startDate)
in
Date.date{day = day, hour = hour, minute = minute, second = second, month = month, offset = offset, year = year}
end;</layout>
        </ml>
        <ml id="ID1264242992">fun generateCase(id:ID)=
let

val _ = createCaseFile(id);
val curDate = add2StartDate(intTime()) ;
val timestamp = (Date.fmt "%Y-%m-%dT%H:%M:%S.000+01:00" curDate);
val data = ["Cost", Int.toString(OneTimeCostPerToken), "ModelTimeStamp", Int.toString(intTime())];
val _ = addATE(id, "Generated input", ["complete"], timestamp, "generator", data);
in
  {ID=id, ts=intTime(), ats=intTime()}
end;
          <layout>fun generateCase(id:ID)=
let

val _ = createCaseFile(id);
val curDate = add2StartDate(intTime()) ;
val timestamp = (Date.fmt "%Y-%m-%dT%H:%M:%S.000+01:00" curDate);
val data = ["Cost", Int.toString(OneTimeCostPerToken), "ModelTimeStamp", Int.toString(intTime())];
val _ = addATE(id, "Generated input", ["complete"], timestamp, "generator", data);
in
  {ID=id, ts=intTime(), ats=intTime()}
end;</layout>
        </ml>
        <ml id="ID1264253932">fun generatorGuard(i:ID) =
let
val dateCompare = Date.compare(add2StartDate(intTime()), endDate) &lt;> GREATER;
in
if i &lt;= totalNoOfToken andalso dateCompare=true then true else false
end;
          <layout>fun generatorGuard(i:ID) =
let
val dateCompare = Date.compare(add2StartDate(intTime()), endDate) &lt;> GREATER;
in
if i &lt;= totalNoOfToken andalso dateCompare=true then true else false
end;</layout>
        </ml>
      </block>
      <var id="ID7000">
        <type>
          <id>CASE</id>
        </type>
        <id>caseInfop</id>
      </var>
      <var id="ID7001">
        <type>
          <id>INT</id>
        </type>
        <id>path</id>
      </var>
      <ml id="ID7002">fun initCaseInfo(id) = {Id=id,CaseStartTime=IntInf.toInt(time()),CaseEndTime=0};</ml>
      <block id="ID1264285623">
        <id>TIMETABLE</id>
        <color id="ID1264285915">
          <id>RECINT</id>
          <record>
            <recordfield>
              <id>Name</id>
              <id>STRING</id>
            </recordfield>
            <recordfield>
              <id>StartTime</id>
              <id>INT</id>
            </recordfield>
            <recordfield>
              <id>Duration</id>
              <id>INT</id>
            </recordfield>
          </record>
          <layout>colset RECINT = record Name:STRING * StartTime:INT * Duration:INT;
(*All durations are in seconds*)</layout>
        </color>
        <color id="ID1264286135">
          <id>RECURRINGINTERVALS</id>
          <list>
            <id>RECINT</id>
          </list>
          <layout>colset RECURRINGINTERVALS = list RECINT;</layout>
        </color>
        <color id="ID1264286368">
          <id>TTEXCEPTION</id>
          <record>
            <recordfield>
              <id>Name</id>
              <id>STRING</id>
            </recordfield>
            <recordfield>
              <id>RepeatCount</id>
              <id>INT</id>
            </recordfield>
            <recordfield>
              <id>RepetitionDuration</id>
              <id>INT</id>
            </recordfield>
            <recordfield>
              <id>BeginDate</id>
              <id>STRING</id>
            </recordfield>
            <recordfield>
              <id>RecurringIntervals</id>
              <id>RECURRINGINTERVALS</id>
            </recordfield>
          </record>
          <layout>colset TTEXCEPTION = record Name:STRING * RepeatCount:INT * RepetitionDuration:INT * BeginDate:STRING * RecurringIntervals:RECURRINGINTERVALS;</layout>
        </color>
        <color id="ID1264286614">
          <id>TTEXCEPTIONS</id>
          <list>
            <id>TTEXCEPTION</id>
          </list>
          <layout>colset TTEXCEPTIONS = list TTEXCEPTION;</layout>
        </color>
        <color id="ID1264286873">
          <id>TIMETABLE</id>
          <record>
            <recordfield>
              <id>Name</id>
              <id>STRING</id>
            </recordfield>
            <recordfield>
              <id>RepeatCount</id>
              <id>INT</id>
            </recordfield>
            <recordfield>
              <id>RepetitionDuration</id>
              <id>INT</id>
            </recordfield>
            <recordfield>
              <id>BeginDate</id>
              <id>STRING</id>
            </recordfield>
            <recordfield>
              <id>RecurringIntervals</id>
              <id>RECURRINGINTERVALS</id>
            </recordfield>
            <recordfield>
              <id>TTExceptions</id>
              <id>TTEXCEPTIONS</id>
            </recordfield>
          </record>
          <layout>colset TIMETABLE = record Name:STRING * RepeatCount:INT * RepetitionDuration:INT * BeginDate:STRING * RecurringIntervals:RECURRINGINTERVALS * TTExceptions:TTEXCEPTIONS;</layout>
        </color>
        <color id="ID1264287714">
          <id>TIMETABLES</id>
          <list>
            <id>TIMETABLE</id>
          </list>
          <layout>colset TIMETABLES = list TIMETABLE;</layout>
        </color>
      </block>
      <block id="ID1264284564">
        <id>RESOURCES</id>
        <block id="ID1264294385">
          <id>FUN</id>
          <ml id="ID1264295136">fun isRole(roles:SLIST, required:STRING) = List.exists (fn x => x = required) roles;
            <layout>fun isRole(roles:SLIST, required:STRING) = List.exists (fn x => x = required) roles;</layout>
          </ml>
          <ml id="ID1264295657">fun checkRoles [] [] = true
| checkRoles _ [] = true
| checkRoles roles (role::reqRoles) = List.exists (fn x => x = role) roles andalso checkRoles roles reqRoles ;
            <layout>fun checkRoles [] [] = true
| checkRoles _ [] = true
| checkRoles roles (role::reqRoles) = List.exists (fn x => x = role) roles andalso checkRoles roles reqRoles ;</layout>
          </ml>
          <ml id="ID1264296453">fun check_roles(roles:SLIST, required:SLIST) = checkRoles roles required;
            <layout>fun check_roles(roles:SLIST, required:SLIST) = checkRoles roles required;</layout>
          </ml>
        </block>
        <block id="ID1264284709">
          <id>COLSET</id>
          <color id="ID1264284893">
            <id>RCOST</id>
            <record>
              <recordfield>
                <id>Value</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>CostPerDuration</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>CostPerQuantity</id>
                <id>INT</id>
              </recordfield>
              <recordfield>
                <id>CostApplicableTT</id>
                <id>TIMETABLES</id>
              </recordfield>
            </record>
            <layout>colset RCOST = record Value:INT * CostPerDuration:INT * CostPerQuantity:INT * CostApplicableTT:TIMETABLES;</layout>
          </color>
          <color id="ID1264285038">
            <id>RCOSTS</id>
            <list>
              <id>RCOST</id>
            </list>
            <layout>colset RCOSTS = list RCOST;</layout>
          </color>
          <color id="ID1264285196">
            <id>RES</id>
            <timed/>
            <record>
              <recordfield>
                <id>Name</id>
                <id>STRING</id>
              </recordfield>
              <recordfield>
                <id>Costs</id>
                <id>RCOSTS</id>
              </recordfield>
              <recordfield>
                <id>Roles</id>
                <id>SLIST</id>
              </recordfield>
              <recordfield>
                <id>Availability</id>
                <id>TIMETABLES</id>
              </recordfield>
            </record>
            <layout>colset RES = record Name:STRING * Costs:RCOSTS * Roles:SLIST * Availability:TIMETABLES timed;</layout>
          </color>
        </block>
        <block id="ID1264288637">
          <id>VAL</id>
          <ml id="ID1264289303">val recint_weekend = {Name="weekend", StartTime=0, Duration=((60*60)*24*2)};
            <layout>val recint_weekend = {Name="weekend", StartTime=0, Duration=((60*60)*24*2)};</layout>
          </ml>
          <ml id="ID1264289662">val recint_dayShift = {Name="Day shift", StartTime=((60*60)*9), Duration=((60*60)*9)};
            <layout>val recint_dayShift = {Name="Day shift", StartTime=((60*60)*9), Duration=((60*60)*9)};</layout>
          </ml>
          <ml id="ID1264290033">val recint_bulk = {Name="bulk", StartDate=0, Duration=((60*60)*24)};
            <layout>val recint_bulk = {Name="bulk", StartDate=0, Duration=((60*60)*24)};</layout>
          </ml>
          <ml id="ID1264290416">val tte_weekend = {Name="weekend", RepeatCount=0, RepetitionDuration=((60*60)*24*7), BeginDate="", RecurringIntervals=[recint_weekend]};
            <layout>val tte_weekend = {Name="weekend", RepeatCount=0, RepetitionDuration=((60*60)*24*7), BeginDate="", RecurringIntervals=[recint_weekend]};</layout>
          </ml>
          <ml id="ID1264290812">val tt_bulkweek = {Name="week", RepeatCount=0, RepetitionDuration=((60*60)*24), BeginDate="", RecurringIntervals=[recint_bulk], Exceptions=[tte_weekend]};
            <layout>val tt_bulkweek = {Name="week", RepeatCount=0, RepetitionDuration=((60*60)*24), BeginDate="", RecurringIntervals=[recint_bulk], Exceptions=[tte_weekend]};</layout>
          </ml>
          <ml id="ID1264291221">val tt_week = {Name="week", RepeatCount=0, RepetitionDuration=604800, BeginDate="dasdas", RecurringIntervals=[recint_dayShift], TTExceptions=[tte_weekend]};
            <layout>val tt_week = {Name="week", RepeatCount=0, RepetitionDuration=604800, BeginDate="dasdas", RecurringIntervals=[recint_dayShift], TTExceptions=[tte_weekend]};</layout>
          </ml>
          <ml id="ID1264292078">val manager = {Name="Manager", Costs=[{Value=10000, CostPerDuration=3600, CostPerQuantity=0, CostApplicableTT=[]}], Roles=["manager"], Availability=[tt_week]};
            <layout>val manager = {Name="Manager", Costs=[{Value=10000, CostPerDuration=3600, CostPerQuantity=0, CostApplicableTT=[]}], Roles=["manager"], Availability=[tt_week]};</layout>
          </ml>
          <ml id="ID1264291643">val clerk = {Name="clerk", Costs=[{Value=10000, CostPerDuration=3600, CostPerQuantity=0, CostApplicableTT=[]}], Roles=["clerk"], Availability=[tt_week]};
            <layout>val clerk = {Name="clerk", Costs=[{Value=10000, CostPerDuration=3600, CostPerQuantity=0, CostApplicableTT=[]}], Roles=["clerk"], Availability=[tt_week]};</layout>
          </ml>
        </block>
        <var id="ID1264297280">
          <type>
            <id>RES</id>
          </type>
          <id>r</id>
          <layout>var r:RES;</layout>
        </var>
      </block>
      <color id="ID1264301925">
        <id>TRANSPARAMS</id>
        <record>
          <recordfield>
            <id>transitionName</id>
            <id>STRING</id>
          </recordfield>
          <recordfield>
            <id>pt</id>
            <id>DISTRIBUTION</id>
          </recordfield>
          <recordfield>
            <id>pCost</id>
            <id>DISTRIBUTION</id>
          </recordfield>
          <recordfield>
            <id>sCost</id>
            <id>DISTRIBUTION</id>
          </recordfield>
          <recordfield>
            <id>revenue</id>
            <id>DISTRIBUTION</id>
          </recordfield>
          <recordfield>
            <id>pWaitTimeDur</id>
            <id>INT</id>
          </recordfield>
          <recordfield>
            <id>pWaitTimeCost</id>
            <id>INT</id>
          </recordfield>
          <recordfield>
            <id>NoOfResources</id>
            <id>INT</id>
          </recordfield>
        </record>
        <layout>colset TRANSPARAMS  = record 
transitionName:STRING * pt: DISTRIBUTION * pCost:DISTRIBUTION * sCost:DISTRIBUTION * revenue:DISTRIBUTION * pWaitTimeDur:INT * pWaitTimeCost:INT * NoOfResources:INT;</layout>
      </color>
      <ml id="ID1264301874">fun transitionAction (a:CASE, params:TRANSPARAMS) = 
let
  val id = #ID(a)
  val ts = #ts(a)
  val ats = #ats(a)
  val transitionName = #transitionName(params)
  val noOr = #NoOfResources(params)
  val waitTime = intTime() - ts
  val waitTimeDur = #pWaitTimeDur(params)
  val waitTimeDur = Real.fromInt waitTimeDur
  val waitTimeCost = #pWaitTimeCost(params)
  val waitTimeCost = Real.fromInt waitTimeCost
  val waitTime_real = Real.fromInt waitTime
  val waitTimeCost = if waitTimeDur > 0.0 then round((waitTime_real/waitTimeDur)*waitTimeCost) else 0;

  val procTime = calcDisValue(#pt(params))
  val procTime_real = Real.fromInt procTime

  val processcost = calcDisValue(#pCost(params))
  val scost = calcDisValue(#sCost(params))
  val revenue = calcDisValue(#revenue(params))
  val allcost = processcost + scost

val curDate = add2StartDate(intTime()) ;
val timestamp = (Date.fmt "%Y-%m-%dT%H:%M:%S.000+01:00" curDate);
val data = ["WaitingTime", Int.toString(waitTime), "WaitTimeCost", Int.toString(waitTimeCost), "ModelTimeStamp", Int.toString(intTime())];
val _ = addATE(id, transitionName, ["start"], timestamp, "", data);

val curDate = add2StartDate(intTime() +procTime) ;
val timestamp = (Date.fmt "%Y-%m-%dT%H:%M:%S.000+01:00" curDate);
val data = ["ProcessingTime", Int.toString(procTime), "Cost", Int.toString(allcost), "StartupCost", Int.toString(scost)]
val data = data ++ ["Revenue", Int.toString(revenue), "NoOfResources", Int.toString(#NoOfResources(params)), "ModelTimeStamp", Int.toString(intTime()+procTime)];
val _ = addATE(id, transitionName, ["complete"], timestamp, "", data);
in
  (procTime)
end
        <layout>fun transitionAction (a:CASE, params:TRANSPARAMS) = 
let
  val id = #ID(a)
  val ts = #ts(a)
  val ats = #ats(a)
  val transitionName = #transitionName(params)
  val noOr = #NoOfResources(params)
  val waitTime = intTime() - ts
  val waitTimeDur = #pWaitTimeDur(params)
  val waitTimeDur = Real.fromInt waitTimeDur
  val waitTimeCost = #pWaitTimeCost(params)
  val waitTimeCost = Real.fromInt waitTimeCost
  val waitTime_real = Real.fromInt waitTime
  val waitTimeCost = if waitTimeDur > 0.0 then round((waitTime_real/waitTimeDur)*waitTimeCost) else 0;

  val procTime = calcDisValue(#pt(params))
  val procTime_real = Real.fromInt procTime

  val processcost = calcDisValue(#pCost(params))
  val scost = calcDisValue(#sCost(params))
  val revenue = calcDisValue(#revenue(params))
  val allcost = processcost + scost

val curDate = add2StartDate(intTime()) ;
val timestamp = (Date.fmt "%Y-%m-%dT%H:%M:%S.000+01:00" curDate);
val data = ["WaitingTime", Int.toString(waitTime), "WaitTimeCost", Int.toString(waitTimeCost), "ModelTimeStamp", Int.toString(intTime())];
val _ = addATE(id, transitionName, ["start"], timestamp, "", data);

val curDate = add2StartDate(intTime() +procTime) ;
val timestamp = (Date.fmt "%Y-%m-%dT%H:%M:%S.000+01:00" curDate);
val data = ["ProcessingTime", Int.toString(procTime), "Cost", Int.toString(allcost), "StartupCost", Int.toString(scost)]
val data = data ++ ["Revenue", Int.toString(revenue), "NoOfResources", Int.toString(#NoOfResources(params)), "ModelTimeStamp", Int.toString(intTime()+procTime)];
val _ = addATE(id, transitionName, ["complete"], timestamp, "", data);
in
  (procTime)
end</layout>
      </ml>
      <ml id="ID1264304297">fun transitionActionR (a:CASE, r:RES, params:TRANSPARAMS) = 
let
  val id = #ID(a)
  val ts = #ts(a)
  val ats = #ats(a)
  val transitionName = #transitionName(params)
  val resourceName = #Name(r)
  val noOr = #NoOfResources(params)
  val waitTime = intTime() - ts
  val waitTimeDur = #pWaitTimeDur(params)
  val waitTimeDur = Real.fromInt waitTimeDur
  val waitTimeCost = #pWaitTimeCost(params)
  val waitTimeCost = Real.fromInt waitTimeCost
  val waitTime_real = Real.fromInt waitTime
  val waitTimeCost = if waitTimeDur > 0.0 then round((waitTime_real/waitTimeDur)*waitTimeCost) else 0;

  val procTime = calcDisValue(#pt(params))
  val procTime_real = Real.fromInt procTime

(*Sum up the costs of resources*)
val rcosts = #Costs(r)
(*TODO: to check the timetable*)
fun calcResourceCost(n:RCOST) = 
let
  val costDur = #CostPerDuration(n)
  val costDur = Real.fromInt costDur 
  val value = #Value(n)
  val value = Real.fromInt value
in
  if costDur > 0.0 then round((procTime_real/costDur)*value) else round(value)
end;
val rec rCost = fn ([]) => 0 | n::s => calcResourceCost(n) + rCost  s
val resCost = rCost(rcosts)*noOr;
(*end sum up*)

  val processcost = calcDisValue(#pCost(params))
  val scost = calcDisValue(#sCost(params))
  val revenue = calcDisValue(#revenue(params))
  val allcost = processcost + resCost + scost

val curDate = add2StartDate(intTime()) ;
val timestamp = (Date.fmt "%Y-%m-%dT%H:%M:%S.000+01:00" curDate);
val data = ["WaitingTime", Int.toString(waitTime), "WaitTimeCost", Int.toString(waitTimeCost), "ModelTimeStamp", Int.toString(intTime())];
val _ = addATE(id, transitionName, ["start"], timestamp, resourceName, data);

val curDate = add2StartDate(intTime() +procTime) ;
val timestamp = (Date.fmt "%Y-%m-%dT%H:%M:%S.000+01:00" curDate);
val data = ["ProcessingTime", Int.toString(procTime), "Cost", Int.toString(allcost), "StartupCost", Int.toString(scost)]
val data = data ++ ["ResourceCost", Int.toString(resCost), "Revenue", Int.toString(revenue), "NoOfResources", Int.toString(#NoOfResources(params)), "ModelTimeStamp", Int.toString(intTime()+procTime)];
val _ = addATE(id, transitionName, ["complete"], timestamp, resourceName, data);
in
  (procTime)
end
        <layout>fun transitionActionR (a:CASE, r:RES, params:TRANSPARAMS) = 
let
  val id = #ID(a)
  val ts = #ts(a)
  val ats = #ats(a)
  val transitionName = #transitionName(params)
  val resourceName = #Name(r)
  val noOr = #NoOfResources(params)
  val waitTime = intTime() - ts
  val waitTimeDur = #pWaitTimeDur(params)
  val waitTimeDur = Real.fromInt waitTimeDur
  val waitTimeCost = #pWaitTimeCost(params)
  val waitTimeCost = Real.fromInt waitTimeCost
  val waitTime_real = Real.fromInt waitTime
  val waitTimeCost = if waitTimeDur > 0.0 then round((waitTime_real/waitTimeDur)*waitTimeCost) else 0;

  val procTime = calcDisValue(#pt(params))
  val procTime_real = Real.fromInt procTime

(*Sum up the costs of resources*)
val rcosts = #Costs(r)
(*TODO: to check the timetable*)
fun calcResourceCost(n:RCOST) = 
let
  val costDur = #CostPerDuration(n)
  val costDur = Real.fromInt costDur 
  val value = #Value(n)
  val value = Real.fromInt value
in
  if costDur > 0.0 then round((procTime_real/costDur)*value) else round(value)
end;
val rec rCost = fn ([]) => 0 | n::s => calcResourceCost(n) + rCost  s
val resCost = rCost(rcosts)*noOr;
(*end sum up*)

  val processcost = calcDisValue(#pCost(params))
  val scost = calcDisValue(#sCost(params))
  val revenue = calcDisValue(#revenue(params))
  val allcost = processcost + resCost + scost

val curDate = add2StartDate(intTime()) ;
val timestamp = (Date.fmt "%Y-%m-%dT%H:%M:%S.000+01:00" curDate);
val data = ["WaitingTime", Int.toString(waitTime), "WaitTimeCost", Int.toString(waitTimeCost), "ModelTimeStamp", Int.toString(intTime())];
val _ = addATE(id, transitionName, ["start"], timestamp, resourceName, data);

val curDate = add2StartDate(intTime() +procTime) ;
val timestamp = (Date.fmt "%Y-%m-%dT%H:%M:%S.000+01:00" curDate);
val data = ["ProcessingTime", Int.toString(procTime), "Cost", Int.toString(allcost), "StartupCost", Int.toString(scost)]
val data = data ++ ["ResourceCost", Int.toString(resCost), "Revenue", Int.toString(revenue), "NoOfResources", Int.toString(#NoOfResources(params)), "ModelTimeStamp", Int.toString(intTime()+procTime)];
val _ = addATE(id, transitionName, ["complete"], timestamp, resourceName, data);
in
  (procTime)
end</layout>
      </ml>
    <ml id="ID1234">val totalNoOfToken = 100;</ml><ml id="ID1235">val noOfTokensPerBundle = 1;</ml><ml id="ID1236">val startDate = Date.date{day = 1, hour = 0, minute = 0, month = Date.Jan, offset = NONE, second = 0, year = 2000};</ml><ml id="ID1237">val endDate = Date.date{day = 1, hour = 0, minute = 0, month = Date.Jan, offset = NONE, second = 0, year = 2001};</ml><ml id="ID1238">val timeBetweenBundles = {dtype=specific, specificValue=100, mean=0, std=0};;</ml><ml id="ID1239">val MANAGER = {Name="MANAGER", Costs=[{Value=10000, CostPerDuration=3600, CostPerQuantity=0, CostApplicableTT=[]}], Roles=["MANAGER"], Availability=[tt_week]};;</ml><ml id="ID1240">val CLERK = {Name="CLERK", Costs=[{Value=10000, CostPerDuration=3600, CostPerQuantity=0, CostApplicableTT=[]}], Roles=["CLERK"], Availability=[tt_week]};;</ml></globbox>
    <page id="PAGE_PROCESS">
      <pageattr name="Process"/>
    <trans id="ID1000"><posattr x="616" y="2106"/><text/><box h="25" w="150"/><subst subpage="PAGE_GENERATOR" portsock="(ID1264234111,ID1004)"><subpageinfo id="ID1007"/></subst><cond id="ID1001"><text/></cond><time id="ID1002"><text/></time><code id="ID1003"><posattr x="776.0" y="2126.0"/><text/></code></trans><place id="ID1004"><posattr x="616" y="2034"/><text/><ellipse h="25" w="150"/><type><posattr x="676.0" y="2054.0"/><text>CASE</text></type><initmark id="ID1005"><text/></initmark></place><arc id="ID1006" orientation="TtoP"><transend idref="ID1000"/><placeend idref="ID1004"/><annot><posattr x="626.0" y="2070.0"/><text>c</text></annot></arc><trans id="ID1009"><posattr x="616" y="1818"/><text/><box h="25" w="150"/><cond id="ID1010"><text/></cond><time id="ID1011"><text/></time><code id="ID1012"><posattr x="776.0" y="1838.0"/><text>input ();
output (path);
action
(
  let
    val p = discrete(0, 99);
  in
 if p>0 andalso p&lt;20 then 353
 else 352
end
);</text></code></trans><trans id="ID1013"><posattr x="616" y="1962"/><text/><box h="25" w="150"/><cond id="ID1014"><text/></cond><time id="ID1015"><text/></time><code id="ID1016"><posattr x="776.0" y="1982.0"/><text/></code></trans><arc id="ID1017" orientation="PtoT"><transend idref="ID1013"/><placeend idref="ID1004"/><annot><posattr x="626.0" y="1998.0"/><text>c</text></annot></arc><place id="ID1018"><posattr x="616" y="1890"/><text/><ellipse h="25" w="150"/><type><posattr x="676.0" y="1910.0"/><text>CASE</text></type><initmark id="ID1019"><text/></initmark></place><arc id="ID1020" orientation="PtoT"><transend idref="ID1009"/><placeend idref="ID1018"/><annot><posattr x="626.0" y="1854.0"/><text>c</text></annot></arc><arc id="ID1021" orientation="TtoP"><transend idref="ID1013"/><placeend idref="ID1018"/><annot><posattr x="626.0" y="1926.0"/><text>c</text></annot></arc><trans id="ID1022"><posattr x="275" y="1242"/><text/><box h="25" w="150"/><cond id="ID1023"><text>[check_roles(#Roles(r),["MANAGER"])]</text></cond><time id="ID1024"><text/></time><code id="ID1025"><posattr x="435.0" y="1262.0"/><text>input (c,r);
output (pt);
action
(let
  val transParams = {
    pt={dtype=specific, specificValue=14400, mean=0, std=0},
    pCost={dtype=specific, specificValue=0, mean=0,std=0},
    sCost={dtype=specific, specificValue=0, mean=0,std=0},
    revenue={dtype=specific, specificValue=0, mean=0,std=0},
    pWaitTimeDur=0,
    pWaitTimeCost=0,
    transitionName="Expedited processing",
    NoOfResources=1}
in
transitionActionR(c,r, transParams)
end);</text></code></trans><place id="ID1026"><posattr x="52" y="1170"/><text/><ellipse h="25" w="150"/><type><posattr x="112.0" y="1190.0"/><text>CASE</text></type><initmark id="ID1027"><text/></initmark></place><arc id="ID1028" orientation="TtoP"><transend idref="ID1022"/><placeend idref="ID1026"/><annot><posattr x="396.5" y="1206.0"/><text>CASE.set_ts c (pt+intTime()) @+pt</text></annot></arc><trans id="ID1029"><posattr x="44" y="1098"/><text/><box h="25" w="150"/><cond id="ID1030"><text/></cond><time id="ID1031"><text/></time><code id="ID1032"><posattr x="204.0" y="1118.0"/><text/></code></trans><arc id="ID1033" orientation="PtoT"><transend idref="ID1029"/><placeend idref="ID1026"/><annot><posattr x="66.0" y="1134.0"/><text>c</text></annot></arc><place id="ID1034"><posattr x="504" y="1602"/><text/><ellipse h="25" w="150"/><type><posattr x="564.0" y="1622.0"/><text>CASE</text></type><initmark id="ID1035"><text/></initmark></place><trans id="ID1036"><posattr x="500" y="1530"/><text/><box h="25" w="150"/><cond id="ID1037"><text/></cond><time id="ID1038"><text/></time><code id="ID1039"><posattr x="660.0" y="1550.0"/><text>input ();
output (p);
action
(round(uniform(0.0,100.0))
);</text></code></trans><arc id="ID1040" orientation="PtoT"><transend idref="ID1036"/><placeend idref="ID1034"/><annot><posattr x="516.0" y="1566.0"/><text>c</text></annot></arc><place id="ID1041"><posattr x="498" y="1458"/><text/><ellipse h="25" w="150"/><type><posattr x="558.0" y="1478.0"/><text>CASE</text></type><initmark id="ID1042"><text/></initmark></place><arc id="ID1043" orientation="TtoP"><transend idref="ID1036"/><placeend idref="ID1041"/><annot><posattr x="511.0" y="1494.0"/><text>c</text></annot></arc><trans id="ID1044"><posattr x="497" y="1386"/><text/><box h="25" w="150"/><cond id="ID1045"><text/></cond><time id="ID1046"><text/></time><code id="ID1047"><posattr x="657.0" y="1406.0"/><text/></code></trans><arc id="ID1048" orientation="PtoT"><transend idref="ID1044"/><placeend idref="ID1041"/><annot><posattr x="508.5" y="1422.0"/><text>c</text></annot></arc><place id="ID1049"><posattr x="497" y="1314"/><text/><ellipse h="25" w="150"/><type><posattr x="557.0" y="1334.0"/><text>CASE</text></type><initmark id="ID1050"><text/></initmark></place><arc id="ID1051" orientation="TtoP"><transend idref="ID1044"/><placeend idref="ID1049"/><annot><posattr x="507.0" y="1350.0"/><text>c@+200</text></annot></arc><arc id="ID1052" orientation="PtoT"><transend idref="ID1022"/><placeend idref="ID1049"/><annot><posattr x="618.0" y="1278.0"/><text>c@+200</text></annot></arc><trans id="ID1053"><posattr x="505" y="1674"/><text/><box h="25" w="150"/><cond id="ID1054"><text/></cond><time id="ID1055"><text/></time><code id="ID1056"><posattr x="665.0" y="1694.0"/><text/></code></trans><place id="ID1057"><posattr x="505" y="1746"/><text/><ellipse h="25" w="150"/><type><posattr x="565.0" y="1766.0"/><text>CASE</text></type><initmark id="ID1058"><text/></initmark></place><arc id="ID1059" orientation="TtoP"><transend idref="ID1009"/><placeend idref="ID1057"/><annot><posattr x="681.5" y="1782.0"/><text>(if path=353 then 1`c else empty)</text></annot></arc><arc id="ID1060" orientation="PtoT"><transend idref="ID1053"/><placeend idref="ID1057"/><annot><posattr x="515.0" y="1710.0"/><text>c</text></annot></arc><arc id="ID1061" orientation="TtoP"><transend idref="ID1053"/><placeend idref="ID1034"/><annot><posattr x="515.5" y="1638.0"/><text>c</text></annot></arc><trans id="ID1062"><posattr x="497" y="1242"/><text/><box h="25" w="150"/><cond id="ID1063"><text/></cond><time id="ID1064"><text/></time><code id="ID1065"><posattr x="657.0" y="1262.0"/><text/></code></trans><place id="ID1066"><posattr x="497" y="1170"/><text/><ellipse h="25" w="150"/><type><posattr x="557.0" y="1190.0"/><text>CASE</text></type><initmark id="ID1067"><text/></initmark></place><arc id="ID1068" orientation="PtoT"><transend idref="ID1062"/><placeend idref="ID1049"/><annot><posattr x="507.0" y="1278.0"/><text>c</text></annot></arc><arc id="ID1069" orientation="TtoP"><transend idref="ID1062"/><placeend idref="ID1066"/><annot><posattr x="507.0" y="1206.0"/><text>c</text></annot></arc><trans id="ID1070"><posattr x="551" y="594"/><text/><box h="25" w="150"/><cond id="ID1071"><text/></cond><time id="ID1072"><text/></time><code id="ID1073"><posattr x="711.0" y="614.0"/><text>input (c);
output (pt);
action
(let
  val transParams = {
    pt={dtype=specific, specificValue=0, mean=0, std=0},
    pCost={dtype=specific, specificValue=0, mean=0,std=0},
    sCost={dtype=specific, specificValue=0, mean=0,std=0},
    revenue={dtype=specific, specificValue=0, mean=0,std=0},
    pWaitTimeDur=0,
    pWaitTimeCost=0,
    transitionName="Application processing not sucessful.",
    NoOfResources=1}
in
transitionAction(c, transParams)
end);</text></code></trans><place id="ID1074"><posattr x="551" y="522"/><text/><ellipse h="25" w="150"/><type><posattr x="611.0" y="542.0"/><text>CASE</text></type><initmark id="ID1075"><text/></initmark></place><arc id="ID1076" orientation="TtoP"><transend idref="ID1070"/><placeend idref="ID1074"/><annot><posattr x="561.0" y="558.0"/><text>CASE.set_ts c (pt+intTime()) @+pt</text></annot></arc><trans id="ID1077"><posattr x="551" y="450"/><text/><box h="25" w="150"/><cond id="ID1078"><text/></cond><time id="ID1079"><text/></time><code id="ID1080"><posattr x="711.0" y="470.0"/><text/></code></trans><arc id="ID1081" orientation="PtoT"><transend idref="ID1077"/><placeend idref="ID1074"/><annot><posattr x="561.0" y="486.0"/><text>c</text></annot></arc><place id="ID1082"><posattr x="551" y="1026"/><text/><ellipse h="25" w="150"/><type><posattr x="611.0" y="1046.0"/><text>CASE</text></type><initmark id="ID1083"><text/></initmark></place><trans id="ID1084"><posattr x="551" y="954"/><text/><box h="25" w="150"/><cond id="ID1085"><text/></cond><time id="ID1086"><text/></time><code id="ID1087"><posattr x="711.0" y="974.0"/><text>input ();
output (p);
action
(round(uniform(0.0,100.0))
);</text></code></trans><arc id="ID1088" orientation="PtoT"><transend idref="ID1084"/><placeend idref="ID1082"/><annot><posattr x="561.0" y="990.0"/><text>c</text></annot></arc><place id="ID1089"><posattr x="551" y="810"/><text/><ellipse h="25" w="150"/><type><posattr x="611.0" y="830.0"/><text>CASE</text></type><initmark id="ID1090"><text/></initmark></place><arc id="ID1091" orientation="TtoP"><transend idref="ID1084"/><placeend idref="ID1089"/><annot><posattr x="561.0" y="882.0"/><text>c</text></annot></arc><trans id="ID1092"><posattr x="551" y="738"/><text/><box h="25" w="150"/><cond id="ID1093"><text/></cond><time id="ID1094"><text/></time><code id="ID1095"><posattr x="711.0" y="758.0"/><text/></code></trans><arc id="ID1096" orientation="PtoT"><transend idref="ID1092"/><placeend idref="ID1089"/><annot><posattr x="561.0" y="774.0"/><text>c</text></annot></arc><place id="ID1097"><posattr x="551" y="666"/><text/><ellipse h="25" w="150"/><type><posattr x="611.0" y="686.0"/><text>CASE</text></type><initmark id="ID1098"><text/></initmark></place><arc id="ID1099" orientation="TtoP"><transend idref="ID1092"/><placeend idref="ID1097"/><annot><posattr x="561.0" y="702.0"/><text>c</text></annot></arc><arc id="ID1100" orientation="PtoT"><transend idref="ID1070"/><placeend idref="ID1097"/><annot><posattr x="561.0" y="630.0"/><text>c</text></annot></arc><trans id="ID1101"><posattr x="526" y="1098"/><text/><box h="25" w="150"/><cond id="ID1102"><text/></cond><time id="ID1103"><text/></time><code id="ID1104"><posattr x="686.0" y="1118.0"/><text/></code></trans><arc id="ID1105" orientation="PtoT"><transend idref="ID1101"/><placeend idref="ID1066"/><annot><posattr x="521.5" y="1134.0"/><text>c</text></annot></arc><arc id="ID1106" orientation="TtoP"><transend idref="ID1101"/><placeend idref="ID1082"/><annot><posattr x="548.5" y="1062.0"/><text>c</text></annot></arc><place id="ID1107"><posattr x="423" y="18"/><text/><ellipse h="25" w="150"/><type><posattr x="483.0" y="38.0"/><text>CASE</text></type><initmark id="ID1108"><text/></initmark></place><trans id="ID1109"><posattr x="551" y="306"/><text/><box h="25" w="150"/><cond id="ID1110"><text/></cond><time id="ID1111"><text/></time><code id="ID1112"><posattr x="711.0" y="326.0"/><text/></code></trans><place id="ID1113"><posattr x="551" y="378"/><text/><ellipse h="25" w="150"/><type><posattr x="611.0" y="398.0"/><text>CASE</text></type><initmark id="ID1114"><text/></initmark></place><arc id="ID1115" orientation="TtoP"><transend idref="ID1077"/><placeend idref="ID1113"/><annot><posattr x="561.0" y="414.0"/><text>c</text></annot></arc><arc id="ID1116" orientation="PtoT"><transend idref="ID1109"/><placeend idref="ID1113"/><annot><posattr x="561.0" y="342.0"/><text>c</text></annot></arc><arc id="ID1117" orientation="TtoP"><transend idref="ID1109"/><placeend idref="ID1107"/><annot><posattr x="625.0" y="162.0"/><text>c</text></annot></arc><trans id="ID1118"><posattr x="295" y="378"/><text/><box h="25" w="150"/><cond id="ID1119"><text/></cond><time id="ID1120"><text/></time><code id="ID1121"><posattr x="455.0" y="398.0"/><text>input (c);
output (pt);
action
(let
  val transParams = {
    pt={dtype=specific, specificValue=0, mean=0, std=0},
    pCost={dtype=specific, specificValue=0, mean=0,std=0},
    sCost={dtype=specific, specificValue=0, mean=0,std=0},
    revenue={dtype=specific, specificValue=0, mean=0,std=0},
    pWaitTimeDur=0,
    pWaitTimeCost=0,
    transitionName="Application successfuly processed.",
    NoOfResources=1}
in
transitionAction(c, transParams)
end);</text></code></trans><place id="ID1122"><posattr x="295" y="306"/><text/><ellipse h="25" w="150"/><type><posattr x="355.0" y="326.0"/><text>CASE</text></type><initmark id="ID1123"><text/></initmark></place><arc id="ID1124" orientation="TtoP"><transend idref="ID1118"/><placeend idref="ID1122"/><annot><posattr x="305.0" y="342.0"/><text>CASE.set_ts c (pt+intTime()) @+pt</text></annot></arc><trans id="ID1125"><posattr x="295" y="234"/><text/><box h="25" w="150"/><cond id="ID1126"><text/></cond><time id="ID1127"><text/></time><code id="ID1128"><posattr x="455.0" y="254.0"/><text/></code></trans><arc id="ID1129" orientation="PtoT"><transend idref="ID1125"/><placeend idref="ID1122"/><annot><posattr x="305.0" y="270.0"/><text>c</text></annot></arc><place id="ID1130"><posattr x="295" y="738"/><text/><ellipse h="25" w="150"/><type><posattr x="355.0" y="758.0"/><text>CASE</text></type><initmark id="ID1131"><text/></initmark></place><trans id="ID1132"><posattr x="295" y="666"/><text/><box h="25" w="150"/><cond id="ID1133"><text/></cond><time id="ID1134"><text/></time><code id="ID1135"><posattr x="455.0" y="686.0"/><text>input ();
output (p);
action
(round(uniform(0.0,100.0))
);</text></code></trans><arc id="ID1136" orientation="PtoT"><transend idref="ID1132"/><placeend idref="ID1130"/><annot><posattr x="305.0" y="702.0"/><text>c</text></annot></arc><place id="ID1137"><posattr x="295" y="594"/><text/><ellipse h="25" w="150"/><type><posattr x="355.0" y="614.0"/><text>CASE</text></type><initmark id="ID1138"><text/></initmark></place><arc id="ID1139" orientation="TtoP"><transend idref="ID1132"/><placeend idref="ID1137"/><annot><posattr x="305.0" y="630.0"/><text>c</text></annot></arc><trans id="ID1140"><posattr x="295" y="522"/><text/><box h="25" w="150"/><cond id="ID1141"><text/></cond><time id="ID1142"><text/></time><code id="ID1143"><posattr x="455.0" y="542.0"/><text/></code></trans><arc id="ID1144" orientation="PtoT"><transend idref="ID1140"/><placeend idref="ID1137"/><annot><posattr x="305.0" y="558.0"/><text>c</text></annot></arc><place id="ID1145"><posattr x="295" y="450"/><text/><ellipse h="25" w="150"/><type><posattr x="355.0" y="470.0"/><text>CASE</text></type><initmark id="ID1146"><text/></initmark></place><arc id="ID1147" orientation="TtoP"><transend idref="ID1140"/><placeend idref="ID1145"/><annot><posattr x="305.0" y="486.0"/><text>c</text></annot></arc><arc id="ID1148" orientation="PtoT"><transend idref="ID1118"/><placeend idref="ID1145"/><annot><posattr x="305.0" y="414.0"/><text>c</text></annot></arc><trans id="ID1149"><posattr x="39" y="882"/><text/><box h="25" w="150"/><cond id="ID1150"><text/></cond><time id="ID1151"><text/></time><code id="ID1152"><posattr x="199.0" y="902.0"/><text/></code></trans><place id="ID1153"><posattr x="40" y="1026"/><text/><ellipse h="25" w="150"/><type><posattr x="100.0" y="1046.0"/><text>CASE</text></type><initmark id="ID1154"><text/></initmark></place><arc id="ID1155" orientation="TtoP"><transend idref="ID1029"/><placeend idref="ID1153"/><annot><posattr x="56.0" y="1062.0"/><text>c</text></annot></arc><arc id="ID1156" orientation="PtoT"><transend idref="ID1149"/><placeend idref="ID1153"/><annot><posattr x="50.5" y="954.0"/><text>c</text></annot></arc><arc id="ID1157" orientation="TtoP"><transend idref="ID1149"/><placeend idref="ID1130"/><annot><posattr x="177.0" y="810.0"/><text>c</text></annot></arc><trans id="ID1158"><posattr x="295" y="90"/><text/><box h="25" w="150"/><cond id="ID1159"><text/></cond><time id="ID1160"><text/></time><code id="ID1161"><posattr x="455.0" y="110.0"/><text/></code></trans><place id="ID1162"><posattr x="295" y="162"/><text/><ellipse h="25" w="150"/><type><posattr x="355.0" y="182.0"/><text>CASE</text></type><initmark id="ID1163"><text/></initmark></place><arc id="ID1164" orientation="TtoP"><transend idref="ID1125"/><placeend idref="ID1162"/><annot><posattr x="305.0" y="198.0"/><text>c</text></annot></arc><arc id="ID1165" orientation="PtoT"><transend idref="ID1158"/><placeend idref="ID1162"/><annot><posattr x="305.0" y="126.0"/><text>c</text></annot></arc><arc id="ID1166" orientation="TtoP"><transend idref="ID1158"/><placeend idref="ID1107"/><annot><posattr x="369.0" y="54.0"/><text>c</text></annot></arc><trans id="ID1167"><posattr x="276" y="1098"/><text/><box h="25" w="150"/><cond id="ID1168"><text>[check_roles(#Roles(r),["CLERK"])]</text></cond><time id="ID1169"><text/></time><code id="ID1170"><posattr x="436.0" y="1118.0"/><text>input (c,r);
output (pt);
action
(let
  val transParams = {
    pt={dtype=specific, specificValue=3600, mean=0, std=0},
    pCost={dtype=specific, specificValue=0, mean=0,std=0},
    sCost={dtype=specific, specificValue=0, mean=0,std=0},
    revenue={dtype=specific, specificValue=0, mean=0,std=0},
    pWaitTimeDur=0,
    pWaitTimeCost=0,
    transitionName="Normal processing",
    NoOfResources=1}
in
transitionActionR(c,r, transParams)
end);</text></code></trans><place id="ID1171"><posattr x="278" y="1026"/><text/><ellipse h="25" w="150"/><type><posattr x="338.0" y="1046.0"/><text>CASE</text></type><initmark id="ID1172"><text/></initmark></place><arc id="ID1173" orientation="TtoP"><transend idref="ID1167"/><placeend idref="ID1171"/><annot><posattr x="287.0" y="1062.0"/><text>CASE.set_ts c (pt+intTime()) @+pt</text></annot></arc><trans id="ID1174"><posattr x="295" y="954"/><text/><box h="25" w="150"/><cond id="ID1175"><text/></cond><time id="ID1176"><text/></time><code id="ID1177"><posattr x="455.0" y="974.0"/><text/></code></trans><arc id="ID1178" orientation="PtoT"><transend idref="ID1174"/><placeend idref="ID1171"/><annot><posattr x="296.5" y="990.0"/><text>c</text></annot></arc><place id="ID1179"><posattr x="752" y="1602"/><text/><ellipse h="25" w="150"/><type><posattr x="812.0" y="1622.0"/><text>CASE</text></type><initmark id="ID1180"><text/></initmark></place><trans id="ID1181"><posattr x="752" y="1530"/><text/><box h="25" w="150"/><cond id="ID1182"><text/></cond><time id="ID1183"><text/></time><code id="ID1184"><posattr x="912.0" y="1550.0"/><text>input ();
output (p);
action
(round(uniform(0.0,100.0))
);</text></code></trans><arc id="ID1185" orientation="PtoT"><transend idref="ID1181"/><placeend idref="ID1179"/><annot><posattr x="762.0" y="1566.0"/><text>c</text></annot></arc><place id="ID1186"><posattr x="753" y="1458"/><text/><ellipse h="25" w="150"/><type><posattr x="813.0" y="1478.0"/><text>CASE</text></type><initmark id="ID1187"><text/></initmark></place><arc id="ID1188" orientation="TtoP"><transend idref="ID1181"/><placeend idref="ID1186"/><annot><posattr x="762.5" y="1494.0"/><text>c</text></annot></arc><trans id="ID1189"><posattr x="753" y="1386"/><text/><box h="25" w="150"/><cond id="ID1190"><text/></cond><time id="ID1191"><text/></time><code id="ID1192"><posattr x="913.0" y="1406.0"/><text/></code></trans><arc id="ID1193" orientation="PtoT"><transend idref="ID1189"/><placeend idref="ID1186"/><annot><posattr x="763.0" y="1422.0"/><text>c</text></annot></arc><place id="ID1194"><posattr x="753" y="1314"/><text/><ellipse h="25" w="150"/><type><posattr x="813.0" y="1334.0"/><text>CASE</text></type><initmark id="ID1195"><text/></initmark></place><arc id="ID1196" orientation="TtoP"><transend idref="ID1189"/><placeend idref="ID1194"/><annot><posattr x="763.0" y="1350.0"/><text>c@+1000</text></annot></arc><arc id="ID1197" orientation="PtoT"><transend idref="ID1167"/><placeend idref="ID1194"/><annot><posattr x="1001.5" y="1206.0"/><text>c@+1000</text></annot></arc><trans id="ID1198"><posattr x="744" y="1674"/><text/><box h="25" w="150"/><cond id="ID1199"><text/></cond><time id="ID1200"><text/></time><code id="ID1201"><posattr x="904.0" y="1694.0"/><text/></code></trans><place id="ID1202"><posattr x="727" y="1746"/><text/><ellipse h="25" w="150"/><type><posattr x="787.0" y="1766.0"/><text>CASE</text></type><initmark id="ID1203"><text/></initmark></place><arc id="ID1204" orientation="TtoP"><transend idref="ID1009"/><placeend idref="ID1202"/><annot><posattr x="681.5" y="1782.0"/><text>(if path=352 then 1`c else empty)</text></annot></arc><arc id="ID1205" orientation="PtoT"><transend idref="ID1198"/><placeend idref="ID1202"/><annot><posattr x="745.5" y="1710.0"/><text>c</text></annot></arc><arc id="ID1206" orientation="TtoP"><transend idref="ID1198"/><placeend idref="ID1179"/><annot><posattr x="758.0" y="1638.0"/><text>c</text></annot></arc><trans id="ID1207"><posattr x="1009" y="1242"/><text/><box h="25" w="150"/><cond id="ID1208"><text/></cond><time id="ID1209"><text/></time><code id="ID1210"><posattr x="1169.0" y="1262.0"/><text/></code></trans><place id="ID1211"><posattr x="1009" y="1170"/><text/><ellipse h="25" w="150"/><type><posattr x="1069.0" y="1190.0"/><text>CASE</text></type><initmark id="ID1212"><text/></initmark></place><arc id="ID1213" orientation="PtoT"><transend idref="ID1207"/><placeend idref="ID1194"/><annot><posattr x="891.0" y="1278.0"/><text>c</text></annot></arc><arc id="ID1214" orientation="TtoP"><transend idref="ID1207"/><placeend idref="ID1211"/><annot><posattr x="1019.0" y="1206.0"/><text>c</text></annot></arc><trans id="ID1215"><posattr x="867" y="1098"/><text/><box h="25" w="150"/><cond id="ID1216"><text/></cond><time id="ID1217"><text/></time><code id="ID1218"><posattr x="1027.0" y="1118.0"/><text/></code></trans><arc id="ID1219" orientation="PtoT"><transend idref="ID1215"/><placeend idref="ID1211"/><annot><posattr x="1090.0" y="1134.0"/><text>c</text></annot></arc><arc id="ID1220" orientation="TtoP"><transend idref="ID1215"/><placeend idref="ID1082"/><annot><posattr x="1035.0" y="1062.0"/><text>c</text></annot></arc><trans id="ID1221"><posattr x="295" y="810"/><text/><box h="25" w="150"/><cond id="ID1222"><text/></cond><time id="ID1223"><text/></time><code id="ID1224"><posattr x="455.0" y="830.0"/><text/></code></trans><place id="ID1225"><posattr x="295" y="882"/><text/><ellipse h="25" w="150"/><type><posattr x="355.0" y="902.0"/><text>CASE</text></type><initmark id="ID1226"><text/></initmark></place><arc id="ID1227" orientation="TtoP"><transend idref="ID1174"/><placeend idref="ID1225"/><annot><posattr x="305.0" y="918.0"/><text>c</text></annot></arc><arc id="ID1228" orientation="PtoT"><transend idref="ID1221"/><placeend idref="ID1225"/><annot><posattr x="305.0" y="846.0"/><text>c</text></annot></arc><arc id="ID1229" orientation="TtoP"><transend idref="ID1221"/><placeend idref="ID1130"/><annot><posattr x="305.0" y="774.0"/><text>c</text></annot></arc><place id="ID1230"><posattr x="275" y="1170"/><text/><ellipse h="25" w="150"/><type><posattr x="335.0" y="1190.0"/><text>RES</text></type><initmark id="ID1231"><text>3`MANAGER++13`CLERK</text></initmark></place><arc id="ID1232" orientation="TtoP"><transend idref="ID1167"/><placeend idref="ID1230"/><annot><posattr x="286.5" y="1062.0"/><text>r @+pt</text></annot></arc><arc id="ID1233" orientation="PtoT"><transend idref="ID1167"/><placeend idref="ID1230"/><annot><posattr x="285.5" y="1134.0"/><text>r</text></annot></arc><arc id="ID1241" orientation="TtoP"><transend idref="ID1022"/><placeend idref="ID1230"/><annot><posattr x="285.0" y="1206.0"/><text>r @+pt</text></annot></arc><arc id="ID1242" orientation="PtoT"><transend idref="ID1022"/><placeend idref="ID1230"/><annot><posattr x="285.0" y="1134.0"/><text>r</text></annot></arc></page>
    <page id="PAGE_GENERATOR">
      <pageattr name="Generator"/>
      <place id="ID1264233943">
        <posattr x="-544.000000" y="9.000000"/>
        <fillattr colour="White" pattern="" filled="false"/>
        <lineattr colour="Black" thick="1" type="Solid"/>
        <textattr colour="Black" bold="false"/>
        <text>Counter</text>
        <ellipse w="82.000000" h="54.000000"/>
        <token x="-10.000000" y="0.000000"/>
        <marking x="0.000000" y="0.000000" hidden="false"/>
        <type id="ID1264233944">
          <posattr x="-515.000000" y="-19.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
          <text tool="CPN Tools" version="2.2.0">ID</text>
        </type>
        <initmark id="ID1264233945">
          <posattr x="-500.000000" y="37.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
          <text tool="CPN Tools" version="2.2.0">1`1</text>
        </initmark>
      </place>
      <place id="ID1264234111">
        <posattr x="22.000000" y="99.000000"/>
        <fillattr colour="White" pattern="" filled="false"/>
        <lineattr colour="Black" thick="1" type="Solid"/>
        <textattr colour="Black" bold="false"/>
        <text>gen_start</text>
        <ellipse w="46.000000" h="40.000000"/>
        <token x="-10.000000" y="0.000000"/>
        <marking x="0.000000" y="0.000000" hidden="false"/>
        <type id="ID1264234112">
          <posattr x="57.500000" y="75.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
          <text tool="CPN Tools" version="2.2.0">CASE</text>
        </type>
        <initmark id="PORT_GENERATOR">
          <posattr x="73.000000" y="122.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
          <text tool="CPN Tools" version="2.2.0"/>
        </initmark>
        <port id="PORT_GENERATOR" type="Out">
          <posattr x="2.000000" y="82.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
        </port>
      </place>
      <trans id="ID1264233938" explicit="false">
        <posattr x="-209.000000" y="99.000000"/>
        <fillattr colour="White" pattern="" filled="false"/>
        <lineattr colour="Black" thick="1" type="solid"/>
        <textattr colour="Black" bold="false"/>
        <text>Generator</text>
        <box w="90.000000" h="36.000000"/>
        <binding x="7.200000" y="-3.000000"/>
        <cond id="ID1264301103">
          <posattr x="-341.500000" y="128.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
          <text tool="CPN Tools" version="2.2.0">[generatorGuard(i) = true]</text>
        </cond>
        <time id="ID1264233940">
          <posattr x="-149.500000" y="128.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
          <text tool="CPN Tools" version="2.2.0"/>
        </time>
        <code id="ID1264233941">
          <posattr x="-104.500000" y="35.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
          <text tool="CPN Tools" version="2.2.0">input (i);
output (c);
action
(
  generateCase(i)
);</text>
        </code>
        <channel id="ID1264233942">
          <posattr x="-287.500000" y="99.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
          <text tool="CPN Tools" version="2.2.0"/>
        </channel>
      </trans>
      <arc id="ID1264233946" orientation="TtoP" order="1">
        <posattr x="0.000000" y="0.000000"/>
        <fillattr colour="White" pattern="" filled="false"/>
        <lineattr colour="Black" thick="1" type="Solid"/>
        <textattr colour="Black" bold="false"/>
        <arrowattr headsize="1.200000" currentcyckle="2"/>
        <transend idref="ID1264233938"/>
        <placeend idref="ID1264233943"/>
        <bendpoint id="ID1264283551" serial="1">
          <posattr x="-224.000000" y="9.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
        </bendpoint>
        <annot id="ID1264233947">
          <posattr x="-311.000000" y="-37.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
          <text tool="CPN Tools" version="2.2.0">i+1@+
(
  if i mod noOfTokensPerBundle = 0
    then calcDisValue(timeBetweenBundles)
  else 0
)</text>
        </annot>
      </arc>
      <arc id="ID1264233948" orientation="PtoT" order="1">
        <posattr x="0.000000" y="0.000000"/>
        <fillattr colour="White" pattern="" filled="false"/>
        <lineattr colour="Black" thick="1" type="Solid"/>
        <textattr colour="Black" bold="false"/>
        <arrowattr headsize="1.200000" currentcyckle="2"/>
        <transend idref="ID1264233938"/>
        <placeend idref="ID1264233943"/>
        <bendpoint id="ID1264276323" serial="1">
          <posattr x="-544.000000" y="99.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
        </bendpoint>
        <annot id="ID1264233949">
          <posattr x="-549.500000" y="67.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
          <text tool="CPN Tools" version="2.2.0">i</text>
        </annot>
      </arc>
      <arc id="ID1264234259" orientation="TtoP" order="1">
        <posattr x="0.000000" y="0.000000"/>
        <fillattr colour="White" pattern="" filled="false"/>
        <lineattr colour="Black" thick="1" type="Solid"/>
        <textattr colour="Black" bold="false"/>
        <arrowattr headsize="1.200000" currentcyckle="2"/>
        <transend idref="ID1264233938"/>
        <placeend idref="ID1264234111"/>
        <bendpoint id="ID1264279865" serial="1">
          <posattr x="-46.000000" y="99.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
        </bendpoint>
        <annot id="ID1264234260">
          <posattr x="-105.000000" y="110.000000"/>
          <fillattr colour="White" pattern="Solid" filled="false"/>
          <lineattr colour="Black" thick="0" type="Solid"/>
          <textattr colour="Black" bold="false"/>
          <text tool="CPN Tools" version="2.2.0">c</text>
        </annot>
      </arc>
    </page>
    <instances>
      <instance id="ID1264218879" page="PAGE_PROCESS"><instance id="ID1008" trans="ID1000"/></instance>
      <instance id="ID1264233961" page="PAGE_GENERATOR"/>
    </instances>
    <options>
      <option name="outputdirectory">
        <value>
          <text>&lt;same as model></text>
        </value>
      </option>
      <option name="repavg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repciavg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repcount">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repfirstval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="replastval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repmax">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repmin">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repssquare">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repssqdev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repstddev">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repsum">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repvariance">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="avg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="ciavg">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="count">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="firstval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="lastval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="max">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="min">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="ssquare">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="ssqdev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="stddev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="sum">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="variance">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="firstupdate">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="interval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="lastupdate">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedavg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedciavg">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedcount">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedfirstval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedlastval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedmax">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedmin">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedssquare">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedssqdev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedstddev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedsum">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedvariance">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
    </options>
    <binders>
      <cpnbinder id="ID1264219689" x="866" y="25" width="1024" height="733">
        <sheets>
          <cpnsheet id="ID1264219682" panx="-44.000000" pany="-128.000000" zoom="1.000000" instance="ID1264218879">
            <zorder>
              <position value="0"/>
            </zorder>
          </cpnsheet>
        </sheets>
        <zorder>
          <position value="0"/>
        </zorder>
      </cpnbinder>
    </binders>
    <monitorblock name="Monitors"/>
    <IndexNode expanded="true">
      <IndexNode expanded="false"/>
      <IndexNode expanded="false"/>
      <IndexNode expanded="false">
        <IndexNode expanded="false"/>
        <IndexNode expanded="false">
          <IndexNode expanded="false">
            <IndexNode expanded="false">
              <IndexNode expanded="true"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="true"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="true"/>
              <IndexNode expanded="true"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
            </IndexNode>
            <IndexNode expanded="false">
              <IndexNode expanded="true"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="true"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="true"/>
              <IndexNode expanded="true"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="true"/>
              <IndexNode expanded="false"/>
            </IndexNode>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
          </IndexNode>
        </IndexNode>
      </IndexNode>
      <IndexNode expanded="false"/>
      <IndexNode expanded="true">
        <IndexNode expanded="false">
          <IndexNode expanded="false"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="true"/>
        </IndexNode>
        <IndexNode expanded="true"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false">
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
        </IndexNode>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false">
          <IndexNode expanded="false"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
        </IndexNode>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false">
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
        </IndexNode>
        <IndexNode expanded="false">
          <IndexNode expanded="false">
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
          </IndexNode>
          <IndexNode expanded="true">
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
            <IndexNode expanded="true"/>
          </IndexNode>
          <IndexNode expanded="false"/>
        </IndexNode>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
      </IndexNode>
      <IndexNode expanded="true"/>
      <IndexNode expanded="true"/>
      <IndexNode expanded="true"/>
    </IndexNode>
  </cpnet>
</workspaceElements>